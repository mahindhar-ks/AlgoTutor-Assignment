1 Find the Duplicate Number

class Solution {
public:
    int findDuplicate(vector <int> & num) {
        sort(num.begin(),num.end());
        int flag=0;
        int k;
        for(int i=0;i<num.size();i++)
        {
           if(num[i]==num[i+1])
           {
              k=num[i];
              break;
            }
         }
   return k; 
}
};

2  Number of Good Pairs

class Solution {
public:
    int numIdenticalPairs(vector<int>& a) {
        int n = a.size();
        int res = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(a[i] == a[j])
                    res++;
            }
        }
        
        return res;
    }
};

3  Find Greatest Common Divisor of Array 

class Solution {
public:
    int findGCD(vector<int>& nums) {
        int minInt=INT_MAX;
        int maxInt=INT_MIN;
        for(int i:nums){
            if(i>maxInt)
            maxInt=i;
            if(i<minInt)
            minInt=i;
        }
        return gcd(minInt,maxInt);
    }
};

4 Unique Number of Occurrences 

class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        
        map<int, int> map1, map2;
     
        for(auto i:arr)
        {
            map1[i]++;
        }
        
        for(auto i:map1)
        {
            map2[i.second]++;
            
            if(map2[i.second]>1)
            {
                return false;
            }
        }

        return true;
    }
};

5 Find All Duplicates in an Array 

class Solution {
public:
    vector<int> findDuplicates(vector<int>& num) {
        map<int,int> map;
        vector<int> ans;
        int i=0;
        while(i<num.size())
        {
            if(map[num[i]]==0)
            {
                map[num[i]]++;
            }
            else
            {
                ans.push_back(num[i]);
            }
            i++;
        }
        return ans;
    }
};

6 Maximum Points You Can Obtain from Cards 

class Solution {
public:
    int maxScore(vector<int>& cardPoints, int l) {
        int ans=0;
        int k=cardPoints.size();
        int i=0,j=k-1;
        int sum=0;
        for(i=0;i<l;i++){
            sum+=cardPoints[i];
        }
        i--;
        if(k==l) return sum;
       
        ans=max(ans,sum);
        while(j>=k-l && i>=0){
            
            sum+=cardPoints[j--];
            sum-=cardPoints[i--];
            
            ans=max(ans,sum);
        }
        return ans;
    }
};





